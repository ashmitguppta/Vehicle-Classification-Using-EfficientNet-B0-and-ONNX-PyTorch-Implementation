# -*- coding: utf-8 -*-
"""verify_model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FSA1zP1oT499NcFxHH4emuh1GwrLMKNZ
"""

!pip install onnxruntime
import numpy as np
import cv2
import os
from torchvision import transforms
import shutil
import onnx
import onnxruntime as rt

from google.colab import drive
drive.mount('/content/drive')

def get_transforms(image_size):
    trans = transforms.Compose(
        [
            transforms.ToTensor(),
            transforms.Resize(image_size),
            transforms.Normalize(mean=[0.485, 0.456, 0.406],
                                 std=[0.229, 0.224, 0.225]),
        ]
    )
    return trans

def main(model_path, classes_path, image_size):
    # Load and check the ONNX model
    onnx_model = onnx.load(model_path)
    onnx.checker.check_model(onnx_model)
    sess = rt.InferenceSession(model_path)

    # Input and output info
    input_name = sess.get_inputs()[0].name
    input_shape = sess.get_inputs()[0].shape
    input_type = sess.get_inputs()[0].type
    print("Input shape:", input_shape)

    output_name = sess.get_outputs()[0].name
    output_shape = sess.get_outputs()[0].shape
    output_type = sess.get_outputs()[0].type
    print("Output shape:", output_shape)

    # Get transforms
    trans = get_transforms(image_size)

    # Load class labels
    with open(classes_path) as f:
        classes = [line.strip() for line in f.readlines()]

    # Create directories
    os.makedirs("./runs/org", exist_ok=True)
    os.makedirs("./runs/pred", exist_ok=True)

    for label in ["autorickshaw", "car", "van"]:
        image_filename = f"{label}.png"
        image_filepath = f"/content/drive/MyDrive/verification/verification_images/{image_filename}"
        org_file_path = os.path.join("./runs/org", image_filename)

        if not os.path.isfile(org_file_path):
            shutil.copy(image_filepath, org_file_path)

        # Load and preprocess image
        org_image = cv2.imread(org_file_path)
        if org_image is None:
            print(f"Failed to load {org_file_path}")
            continue

        image = cv2.cvtColor(org_image, cv2.COLOR_BGR2RGB)
        image = trans(image)
        image = np.array(image.unsqueeze(0))

        # Predict
        pred_outs = sess.run(None, {input_name: image})[0][0]
        pred_arg = pred_outs.argmax()
        pred_conf = round(float(pred_outs[pred_arg]), 2)
        pred_cls = classes[pred_arg]
        pred = f"{pred_cls} ({pred_conf})"

        print(f"âœ… Prediction for {label}.png: {pred}")
        cv2.putText(org_image, pred, (25, 25), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 0), 2)

        save_path = os.path.join("./runs/pred", f"pred_{image_filename}")
        cv2.imwrite(save_path, org_image)
        print(f"Saved to {save_path}")

model_path = "/content/drive/MyDrive/verification/vehicles_classifier.onnx"
classes_path = "/content/drive/MyDrive/verification/sample_classe.txt"
image_size = (224, 224)

main(model_path, classes_path, image_size)

